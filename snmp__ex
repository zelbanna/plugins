#!/usr/bin/python
# -*- coding: utf-8 -*-

__author__ = "Zacharias El Banna"
__version__ = "2.1"
__status__ = "Production"

import netsnmp
import sys
import re

if len(sys.argv) == 2 and sys.argv[1] == "snmpconfig":
 print "require .1.3.6.1.4.1.2636.3.40.1.4.1.1.1.3.0\n";
 sys.exit(0);

argname = re.search('snmp_(.*)_ex', sys.argv[0])
hostname = argname.group(1)

if len(sys.argv) > 1 and sys.argv[1] == "config":
 print "host_name " + hostname
 print """
multigraph sys_temp
graph_title System Temperature
graph_vlabel Degrees Celsius
graph_args --base 1000 -u 100 -l 30
graph_category temp
cputemp.label CPU Temp
cputemp.info The temperature of the RE CPU
cputemp.critical 70
fpctemp.label FPC Temp
fpctemp.info The temperature of the Switch FPC
fpctemp.critical 70

multigraph sys_cpu
graph_title CPU usage
graph_vlabel %
graph_args --base 1000 -u 100 -l 0
graph_category system
average.label Average
average.warning 75
average.critical 85
last1.label Last minute
last1.warning 75
last1.critical 85
last5.label Last 5 minutes
last5.warning 75
last5.critical 85
last15.label Last 15 minutes
last15.warning 75
last15.critical 85

multigraph sys_disk
graph_title Filesystem usage (in %)
graph_vlabel Percentage
graph_args --base 1000 -u 100 -l 0
graph_category disk
disk.label Disk mount"""

else:
 # Temp, CPU AVG, CPU Last
 
 oids = netsnmp.VarList(netsnmp.Varbind(".1.3.6.1.4.1.2636.3.1.13.1.7.9.1.0.0"),	# CPUTemp
						netsnmp.Varbind(".1.3.6.1.4.1.2636.3.1.13.1.7.7.1.0.0"), 	# FPCAvg
						netsnmp.Varbind(".1.3.6.1.4.1.2636.3.1.13.1.8.9.1.0.0"), 	# CpuAvg
						netsnmp.Varbind(".1.3.6.1.4.1.2636.3.1.13.1.20.9.1.0.0"),	# CpuLast1Min
						netsnmp.Varbind(".1.3.6.1.4.1.2636.3.1.13.1.21.9.1.0.0"),	# CpuLast5Min
						netsnmp.Varbind(".1.3.6.1.4.1.2636.3.1.13.1.22.9.1.0.0"),	# CpuLast15Min
						netsnmp.Varbind(".1.3.6.1.2.1.25.2.3.1.5.1"),				# RootTot
						netsnmp.Varbind(".1.3.6.1.2.1.25.2.3.1.6.1"))				# RootUse

 try:
  session = netsnmp.Session(Version = 2, DestHost = hostname, Community = "public", UseNumeric = 1, Timeout = 250000, Retries = 2)
  session.get(oids)
		
  if session.ErrorStr == "Timeout":
   exit(1)

  rootTot = int(oids[6].val)

  print "multigraph sys_temp"
  print "cputemp.value " + oids[0].val
  print "fpctemp.value " + oids[1].val
  print ""
  print "multigraph sys_cpu"
  print "average.value " + oids[2].val
  print "last1.value " + oids[3].val
  print "last5.value " + oids[4].val
  print "last15.value " + oids[5].val
  print ""
  print "multigraph sys_disk"
  print "disk.value " + str(100 * int(oids[7].val) / rootTot) if rootTot > 0 else "0"

 except Exception as exception_error:
  print "DEBUG: snmp issue: " + str(exception_error)
  sys.exit(0)
